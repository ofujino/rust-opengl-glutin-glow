use glow::*;

fn main() {
    unsafe {
        let event_loop = glutin::event_loop::EventLoop::new();

        let window_builder = glutin::window::WindowBuilder::new()
            .with_inner_size(glutin::dpi::LogicalSize::new(640, 480));

        let window = glutin::ContextBuilder::new()
            .with_vsync(true)
            .build_windowed(window_builder, &event_loop)
            .unwrap()
            .make_current()
            .unwrap();

        let gl = glow::Context::from_loader_function(|s| window.get_proc_address(s) as *const _);

        let program = gl.create_program().unwrap();

        let vertex_shader = gl.create_shader(glow::VERTEX_SHADER).unwrap();
        let vertex_shader_source = r#"#version 410
        const vec2 verts[3] = vec2[3](
            vec2( 0.5f,  1.0f),
            vec2(-1.0f, -1.0f),
            vec2( 1.0f, -1.0f)
        );
        void main() {
            gl_Position = vec4(verts[gl_VertexID % 3], 0.0, 1.0);
        }"#;
        gl.shader_source(vertex_shader, vertex_shader_source);
        gl.compile_shader(vertex_shader);
        if !gl.get_shader_compile_status(vertex_shader) {
            panic!("{}", gl.get_shader_info_log(vertex_shader));
        }

        let fragment_shader = gl.create_shader(glow::FRAGMENT_SHADER).unwrap();
        let fragment_shader_source = r#"#version 410
        precision mediump float;
        out vec4 outColor;
        void main() {
            outColor = vec4(1, 1, 1, 1);
        }"#;
        gl.shader_source(fragment_shader, fragment_shader_source);
        gl.compile_shader(fragment_shader);
        if !gl.get_shader_compile_status(fragment_shader) {
            panic!("{}", gl.get_shader_info_log(fragment_shader));
        }

        gl.attach_shader(program, vertex_shader);
        gl.attach_shader(program, fragment_shader);

        gl.link_program(program);
        if !gl.get_program_link_status(program) {
            panic!("{}", gl.get_program_info_log(program));
        }

        gl.use_program(Some(program));

        event_loop.run(move |event, _, control_flow| {
            control_flow.set_wait();
            match event {
                glutin::event::Event::MainEventsCleared => {
                    window.window().request_redraw();
                }
                glutin::event::Event::RedrawRequested(_) => {
                    gl.clear_color(0.0, 0.0, 1.0, 1.0);
                    gl.clear(glow::COLOR_BUFFER_BIT | glow::DEPTH_BUFFER_BIT);
                    gl.draw_arrays(glow::TRIANGLES, 0, 3);
                    window.swap_buffers().unwrap();
                }
                glutin::event::Event::WindowEvent { event, .. } => match event {
                    glutin::event::WindowEvent::CloseRequested => {
                        control_flow.set_exit();
                    }
                    glutin::event::WindowEvent::KeyboardInput { input, .. } => {
                        if let Some(key_code) = input.virtual_keycode {
                            if input.state == glutin::event::ElementState::Pressed {
                                match key_code {
                                    glutin::event::VirtualKeyCode::Escape => {
                                        control_flow.set_exit();
                                    }
                                    _ => (),
                                }
                            }
                        }
                    }
                    _ => (),
                },
                _ => (),
            }
        });
    }
}
